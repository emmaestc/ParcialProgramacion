@page "/home"
@using CurrieTechnologies.Razor.SweetAlert2;
@using Estadio.Shared.Entities;
@using Estadio.WEB.Repositories;
@inject IRepository repository
@inject HttpClient Http
@inject SweetAlertService sweetAlertService

<h3>Gestión de boletas</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="BUSCAR BOLETA..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

@if (boletas is null)
{
    <p>Cargando...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>

                <th>Id</th>
                <th>Fecha uso</th>
                <th>Usado</th>
                <th>Porteria</th>
            </tr>

        </thead>

        <tbody>

            @foreach (var boleta in boletas!)
            {
                <tr>
                    <td>
                        @if (boleta.Usada == "SI")
                        {
                            <p class="text-danger">Esta boleta ya ha sido utilizada.</p>
                            
                        }else
                        {
                            <a class="btn btn-warning" href="/boletas/edit/@boleta.Id">Editar</a>
                        }
                        
                    </td>

                    <td>

                        @boleta.Id
                    </td>
                    <td>
                        @boleta.FechaUso
                    </td>
                    <td>
                        @boleta.Usada
                    </td>
                    <td>
                        @boleta.Porteria
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    public List<Boleta>? boletas { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Boleta>>("/api/boletas");
        boletas = responseHttp.Response;
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/boletas?page={page}";
            url2 = $"api/boletas/totalPages";
        }
        else
        {
            url1 = $"api/boletas?page={page}&filter={Filter}";
            url2 = $"api/boletas/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Boleta>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        boletas = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);

    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
